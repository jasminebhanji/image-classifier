# -*- coding: utf-8 -*-
"""IMG CLASSIFIER

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RkC84JOPvE1oicqW1Ncs6OhtJ0W10pwh
"""

!pip install tensorflow numpy matplotlib

import tensorflow as tf
from tensorflow.keras.datasets import cifar10

# Load dataset (training and testing sets)
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

# Normalize pixel values to be between 0 and 1
x_train, x_test = x_train / 255.0, x_test / 255.0

# Print the shape of the training dataset
print(f"Training data shape: {x_train.shape}")
print(f"Testing data shape: {x_test.shape}")

model = tf.keras.models.Sequential([
    tf.keras.layers.Flatten(input_shape=(32, 32, 3)),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(10)
])

model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

model.fit(x_train, y_train, epochs=5)

test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)
print(f"Test accuracy: {test_acc}")

!pip install pillow

# Step 1: Upload the image file
from google.colab import files

# This will open a file upload window
uploaded = files.upload()

# Step 2: Load and preprocess the image
from PIL import Image
import numpy as np

# Get the filename of the uploaded image
image_path = list(uploaded.keys())[0]  # Grabs the filename from the upload dict
image = Image.open(image_path)

# Display the image
image.show()

# Resize the image to 32x32 pixels (CIFAR-10 image size)
image = image.resize((32, 32))

# Convert the image to a numpy array and normalize the pixel values (between 0 and 1)
image_array = np.array(image) / 255.0

# Ensure the image has the shape (32, 32, 3) as expected by the model
image_array = np.expand_dims(image_array, axis=0)  # Add an extra dimension for batch size

# Step 3: Make a prediction using the trained model
prediction = model.predict(image_array)

# Get the predicted class label (0 to 9 for CIFAR-10)
predicted_label = np.argmax(prediction[0])

# CIFAR-10 class names
class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']

# Get the predicted class name
predicted_class_name = class_names[predicted_label]

# Print the predicted class name
print(f"Predicted class: {predicted_class_name}")